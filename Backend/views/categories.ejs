<!DOCTYPE html>
<html lang="en">
  <%- include("partials/_headerLinks.ejs", {title: 'Add Faq' }) %>

  <body class="hold-transition sidebar-mini">
    <div class="wrapper">
      <%- include("partials/_headerNavbar.ejs") %>
      <%- include("partials/_sidebar.ejs") %>

      <div class="content-wrapper">
        <section class="content-header">
          <div class="container-fluid">
            <h3 class="display-5 my-4 text-center text-primary">
              Category Management
            </h3>
            <div class="container mt-4">
              <!-- Categories Section -->
              <div class="card shadow-sm mb-4">
                <div class="card-header bg-primary text-white">
                  <h5 class="card-title mb-0">Categories</h5>
                </div>
                <div class="card-body">
                  <form method="POST" action="/admin/category/create" enctype="multipart/form-data" id="mainForm">
                    <div class="mb-3">
                      <label for="mainSelect" class="form-label">Category Name</label>
                      <% if(typeof categories !== 'undefined' && categories.length > 0) { %>
                        <select class="form-control main-select" id="mainSelect" name="categoryName">
                          <% categories.forEach(category => { %>
                            <option value="<%= category.id %>"><%= category.name %></option>
                          <% }); %>
                        </select>
                      <% } else { %>
                        <select class="form-control main-select" id="mainSelect" name="categoryName"></select>
                      <% } %>
                    </div>
                    <div class="mb-3">
                      <label for="mainImage" class="form-label">Upload Image</label>
                      <input type="file" class="form-control" id="mainImage" name="image" accept="image/*" required />
                      <img id="mainPreview" class="img-thumbnail mt-2" style="display: none; max-width: 100px" />
                    </div>
                    <button type="submit" class="btn btn-success">Add New Category</button>
                  </form>
                </div>
              </div>

              <!-- Sub-Categories Section -->
 <!-- Sub-Categories Section -->
<div class="card shadow-sm mb-4">
  <div class="card-header bg-info text-white">
    <h5 class="card-title mb-0">Sub-Category</h5>
  </div>
  <div class="card-body">
    <form id="subForm" enctype="multipart/form-data">
      <div class="mb-3">
        <label for="categorySelectForSub" class="form-label">Select Parent Category</label>
        <% if(typeof categories !== 'undefined' && categories.length > 0) { %>
          <select class="form-control category-select" id="categorySelectForSub" name="categoryId">
            <% categories.forEach(category => { %>
              <option value="<%= category.id %>"><%= category.name %></option>
            <% }); %>
          </select>
        <% } else { %>
          <select class="form-control category-select" id="categorySelectForSub" name="categoryId"></select>
        <% } %>
      </div>
      <div class="mb-3">
        <label for="subSelect" class="form-label">Sub-Category Name</label>
        <% if(typeof subCategory !== 'undefined' && subCategory.length > 0) { %>
          <select class="form-control sub-select" id="subSelect" name="name">
            <% subCategory.forEach(sub => { %>
              <option value="<%= sub.id %>"><%= sub.name %></option>
            <% }); %>
          </select>
        <% } else { %>
          <select class="form-control sub-select" id="subSelect" name="name"></select>
        <% } %>
      </div>
      <div class="mb-3">
        <label for="subImage" class="form-label">Upload Image</label>
        <input type="file" class="form-control" id="subImage" name="image" accept="image/*" required />
        <img id="subPreview" class="img-thumbnail mt-2" style="display: none; max-width: 100px" />
      </div>
      <button type="submit" class="btn btn-success">Add New Sub-Category</button>
    </form>
  </div>
</div>

              <!-- Micro-Categories Section -->
              <div class="card shadow-sm mb-4">
                <div class="card-header bg-warning text-white">
                  <h5 class="card-title mb-0">Micro-Category</h5>
                </div>
                <div class="card-body">
                  <form id="microForm" enctype="multipart/form-data">
                    <div class="mb-3">
                      <label for="categorySelectForMicro" class="form-label">Select Parent Category</label>
                      <% if(typeof categories !== 'undefined' && categories.length > 0) { %>
                        <select class="form-control category-select" id="categorySelectForMicro" name="categoryId">
                          <% categories.forEach(category => { %>
                            <option value="<%= category.id %>"><%= category.name %></option>
                          <% }); %>
                        </select>
                      <% } else { %>
                        <select class="form-control category-select" id="categorySelectForMicro" name="categoryId"></select>
                      <% } %>
                    </div>
                    <div class="mb-3">
                      <label for="subCategorySelectForMicro" class="form-label">Select Sub-Category</label>
                      <% if(typeof subCategory !== 'undefined' && subCategory.length > 0) { %>
                        <select class="form-control sub-category-select" id="subCategorySelectForMicro" name="subCategoryId">
                          <% subCategory.forEach(sub => { %>
                            <option value="<%= sub.id %>"><%= sub.name %></option>
                          <% }); %>
                        </select>
                      <% } else { %>
                        <select class="form-control sub-category-select" id="subCategorySelectForMicro" name="subCategoryId"></select>
                      <% } %>
                    </div>
                    <div class="mb-3">
                      <label for="microSelect" class="form-label">Micro-Category Name</label>
                      <% if(typeof microCategory !== 'undefined' && microCategory.length > 0) { %>
                        <select class="form-control micro-select" id="microSelect" name="name">
                          <% microCategory.forEach(micro => { %>
                            <option value="<%= micro.id %>"><%= micro.name %></option>
                          <% }); %>
                        </select>
                      <% } else { %>
                        <select class="form-control micro-select" id="microSelect" name="name"></select>
                      <% } %>
                    </div>
                    <div class="mb-3">
                      <label for="microImage" class="form-label">Upload Image</label>
                      <input type="file" class="form-control" id="microImage" name="image" accept="image/*" required />
                      <img id="microPreview" class="img-thumbnail mt-2" style="display: none; max-width: 100px" />
                    </div>
                    <button type="submit" class="btn btn-success">Add New Micro-Category</button>
                  </form>
                </div>
              </div>


              <!-- Categories List -->
            </div>
          </div>
        </section>
      </div>

      <%- include("partials/_footer.ejs") %>
      <aside class="control-sidebar control-sidebar-dark"></aside>
    </div>

    <%- include("partials/_scripts.ejs") %>
<script>
  class CategoryManager {
  constructor() {
    // Ensure proper initialization of nested structures
    this.categories = <%- JSON.stringify(categories || []) %>.map(cat => ({
      ...cat,
      subCategories: cat.subCategories || []
    }));
    this.subCategories = <%- JSON.stringify(subCategory || []) %>;
    this.microCategories = <%- JSON.stringify(microCategory || []) %>;
    this.init();
  }

  init() {
    this.initializeSelects();
    this.setupEventListeners();
    this.render();
  }

  initializeSelects() {
    const creationOptions = {
      width: '100%',
      placeholder: 'Type or select...',
      allowClear: true,
      tags: true,
      createTag: (params) => ({
        id: params.term,
        text: params.term,
        newOption: true
      })
    };

    const selectionOptions = {
      width: '100%',
      placeholder: 'Select...',
      allowClear: true,
      tags: false
    };

    $('#mainSelect').select2(creationOptions);
    $('#subSelect').select2(creationOptions);
    $('#microSelect').select2(creationOptions);
    $('#categorySelectForSub').select2(selectionOptions);
    $('#categorySelectForMicro').select2(selectionOptions);
    $('#subCategorySelectForMicro').select2(selectionOptions);

    // Initialize with existing data
    this.updateAllSelects();
  }

  setupEventListeners() {
    // Using native form submission for the main form since it needs to handle file uploads
    $('#mainForm').on('submit', (e) => {
      e.preventDefault();
      this.handleMainCategorySubmit(e);
    });

    // Updated to use AJAX for the sub form as well
    $('#subForm').on('submit', (e) => {
      e.preventDefault();
      this.handleSubCategorySubmit(e);
    });
    
    // Updated to use AJAX for the micro form
    $('#microForm').on('submit', (e) => {
      e.preventDefault();
      this.handleMicroCategorySubmit(e);
    });

    $('#mainImage').on('change', (e) => this.previewImage(e.target, 'mainPreview'));
    $('#subImage').on('change', (e) => this.previewImage(e.target, 'subPreview'));
    $('#microImage').on('change', (e) => this.previewImage(e.target, 'microPreview'));

    $('#categorySelectForSub').on('change', () => this.updateSubCategorySelect());
    $('#categorySelectForMicro').on('change', () => this.updateMicroCategorySelects());
    $('#subCategorySelectForMicro').on('change', () => this.updateMicroSelect());
  }

  previewImage(input, previewId) {
    const file = input.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const preview = document.getElementById(previewId);
        preview.src = e.target.result;
        preview.style.display = 'block';
      };
      reader.readAsDataURL(file);
    }
  }

  handleMainCategorySubmit(e) {
    e.preventDefault();
    
    // Check if name and image are provided
    const categoryName = $('#mainSelect').val();
    const imageFile = $('#mainImage')[0].files[0];
    
    if (!categoryName || !imageFile) {
      alert('Category name and image are required!');
      return;
    }

    // Create FormData object to handle file upload
    const formData = new FormData();
    formData.append('categoryName', categoryName);
    formData.append('image', imageFile);

    // Submit the form using AJAX
    $.ajax({
      url: '/admin/category/create',
      type: 'POST',
      data: formData,
      contentType: false, // Required for FormData
      processData: false, // Required for FormData
      success: (response) => {
        if (response.status) {
          alert(response.msg);
          // Reset the form
          $('#mainForm')[0].reset();
          $('#mainPreview').attr('src', '').hide();
          $('#mainSelect').val(null).trigger('change');
          
          // Refresh the page to load new data, or you can update your local data if preferred
          location.reload();
        } else {
          alert('Error: ' + response.msg);
        }
      },
      error: (xhr) => {
        let errorMessage = 'An error occurred while creating the category';
        if (xhr.responseJSON && xhr.responseJSON.msg) {
          errorMessage = xhr.responseJSON.msg;
        }
        alert('Error: ' + errorMessage);
      }
    });
  }

  // Method to handle sub-category submission
  handleSubCategorySubmit(e) {
    e.preventDefault();
    
    // Check if parent category, name and image are provided
    const categoryId = $('#categorySelectForSub').val();
    const name = $('#subSelect').val();
    const imageFile = $('#subImage')[0].files[0];
    
    if (!categoryId || !name || !imageFile) {
      alert('Parent category, sub-category name, and image are all required!');
      return;
    }

    // Create FormData object to handle file upload
    const formData = new FormData();
    formData.append('categoryId', categoryId);
    formData.append('name', name);
    formData.append('image', imageFile);

    // Submit the form using AJAX
    $.ajax({
      url: '/admin/create/sub/category',
      type: 'POST',
      data: formData,
      contentType: false, // Required for FormData
      processData: false, // Required for FormData
      success: (response) => {
        if (response.success) {
          alert(response.message);
          // Reset the form
          $('#subForm')[0].reset();
          $('#subPreview').attr('src', '').hide();
          $('#subSelect').val(null).trigger('change');
          
          // Refresh the page to load new data, or you can update your local data if preferred
          location.reload();
        } else {
          alert('Error: ' + response.message);
        }
      },
      error: (xhr) => {
        let errorMessage = 'An error occurred while creating the sub-category';
        if (xhr.responseJSON && xhr.responseJSON.message) {
          errorMessage = xhr.responseJSON.message;
        }
        alert('Error: ' + errorMessage);
      }
    });
  }

  // New method to handle micro-category submission
  handleMicroCategorySubmit(e) {
    e.preventDefault();
    
    // Check if parent category, sub-category, name and image are provided
    const categoryId = $('#categorySelectForMicro').val();
    const subCategoryId = $('#subCategorySelectForMicro').val();
    const name = $('#microSelect').val();
    const imageFile = $('#microImage')[0].files[0];
    
    if (!categoryId || !subCategoryId || !name || !imageFile) {
      alert('Parent category, sub-category, micro-category name, and image are all required!');
      return;
    }

    // Create FormData object to handle file upload
    const formData = new FormData();
    formData.append('categoryId', categoryId);
    formData.append('subCategoryId', subCategoryId);
    formData.append('name', name);
    formData.append('image', imageFile);

    // Submit the form using AJAX
    $.ajax({
      url: '/admin/create/micro/category',
      type: 'POST',
      data: formData,
      contentType: false, // Required for FormData
      processData: false, // Required for FormData
      success: (response) => {
        if (response.success) {
          alert(response.message);
          // Reset the form
          $('#microForm')[0].reset();
          $('#microPreview').attr('src', '').hide();
          $('#microSelect').val(null).trigger('change');
          
          // Refresh the page to load new data
          location.reload();
        } else {
          alert('Error: ' + response.message);
        }
      },
      error: (xhr) => {
        let errorMessage = 'An error occurred while creating the micro-category';
        if (xhr.responseJSON && xhr.responseJSON.message) {
          errorMessage = xhr.responseJSON.message;
        }
        alert('Error: ' + errorMessage);
      }
    });
  }

  render() {
    const container = $('#categoriesList');
    container.empty();

    if (!this.categories.length) {
      container.html('<p class="text-muted">No categories added yet.</p>');
      return;
    }

    this.categories.forEach(category => {
      const html = `
        <div class="mb-3">
          <div class="d-flex align-items-center">
            <img src="${category.image}" class="img-thumbnail me-3" style="max-width: 80px;">
            <strong>${category.name}</strong>
          </div>
          <div class="ms-4">
            ${(category.subCategories || []).map(sub => `
              <div class="mb-2">
                <div class="d-flex align-items-center">
                  <img src="${sub.image}" class="img-thumbnail me-3" style="max-width: 80px;">
                  ${sub.name}
                </div>
                <div class="ms-4">
                  ${(sub.microCategories || []).map(micro => `
                    <div class="d-flex align-items-center mb-1">
                      <img src="${micro.image}" class="img-thumbnail me-3" style="max-width: 80px;">
                      ${micro.name}
                    </div>
                  `).join('')}
                </div>
              </div>
            `).join('')}
          </div>
        </div>
      `;
      container.append(html);
    });

    this.updateAllSelects();
  }

  updateAllSelects() {
    this.updateCategorySelects();
    this.updateSubCategorySelect();
    this.updateMicroCategorySelects();
  }

  updateCategorySelects() {
    const options = this.categories.map(c => ({ id: c.id, text: c.name }));
    const selectionOptions = {
      data: options,
      width: '100%',
      placeholder: 'Select...',
      allowClear: true,
      tags: false
    };
    $('#categorySelectForSub').select2(selectionOptions);
    $('#categorySelectForMicro').select2(selectionOptions);
  }

  updateSubCategorySelect() {
    const categoryId = $('#categorySelectForSub').val();
    const category = this.categories.find(c => c.id === categoryId);
    const options = category ? 
      category.subCategories.map(s => ({ id: s.id, text: s.name })) : 
      [];
    $('#subSelect').select2({
      data: options,
      width: '100%',
      placeholder: 'Type or select...',
      allowClear: true,
      tags: true,
      createTag: (params) => ({
        id: params.term,
        text: params.term,
        newOption: true
      })
    });
  }

  updateMicroCategorySelects() {
    const categoryId = $('#categorySelectForMicro').val();
    const category = this.categories.find(c => c.id === categoryId);
    const subOptions = category ? 
      category.subCategories.map(s => ({ id: s.id, text: s.name })) : 
      [];
    
    $('#subCategorySelectForMicro').select2({
      data: subOptions,
      width: '100%',
      placeholder: 'Select...',
      allowClear: true,
      tags: false
    });
    
    this.updateMicroSelect();
  }

  updateMicroSelect() {
    const categoryId = $('#categorySelectForMicro').val();
    const subCategoryId = $('#subCategorySelectForMicro').val();
    let options = [];
    
    if (categoryId) {
      const category = this.categories.find(c => c.id === categoryId);
      if (category && subCategoryId) {
        const subCategory = category.subCategories.find(s => s.id === subCategoryId);
        options = subCategory ? 
          (subCategory.microCategories || []).map(m => ({ id: m.id, text: m.name })) : 
          [];
      }
    }

    $('#microSelect').select2({
      data: options,
      width: '100%',
      placeholder: 'Type or select...',
      allowClear: true,
      tags: true,
      createTag: (params) => ({
        id: params.term,
        text: params.term,
        newOption: true
      })
    });
  }
}

$(document).ready(() => {
  const manager = new CategoryManager();
});
</script>
  </body>
</html>